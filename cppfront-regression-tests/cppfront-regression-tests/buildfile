libs =
import! [rule_hint=cxx.link] libs = libcpp2%lib{cpp2}
import cppfront = cppfront%exe{cppfront}

define [see_through] cpp2_cxx: group
define cpp2: file
cpp2{*}: extension = cpp2

define hpp2: file
hpp2{*}: extension = h2

define cpp2_out: file
cpp2_out{*}: extension = cpp

define cppfront_stdout: file
cppfront_stdout{*.cpp2}: extension = output

./: libue{cpp2-meta}: $libs

for t: regression-tests/cpp2{pure2-hello}
{
  n = $name($t)
  d = $directory($t)

  expected_stdout  = $d/test-results/cppfront_stdout{$(n).cpp2.output}
  expected_cpp_out = $d/test-results/cpp2_out{$n}
  ./: alias{$n}: $t $expected_stdout $expected_cpp_out testscript $cppfront
  {
    cppfront = $cppfront
    cpp2_in = $t
    expected_stdout = $expected_stdout
    expected_cpp_out = $expected_cpp_out
    expected_exit = 0
  }

  testscript{$n}: testscript{pure2}@./ libue{cpp2-meta}
  {{
    in = $path($<[0])
    out = $path($>)
    lib_poptions = $cxx.lib_poptions(libue{cpp2-meta}, obje)
    lib_libs = $cxx.lib_libs(libue{cpp2-meta}, obje)
    depdb hash $lib_poptions
    depdb hash $lib_libs

    diag $in $out
    cp --no-cleanup $in $out
    sed -i -e "s|\(^.*lib_poptions =.*\$\)|\1 [strings] $regex.merge($lib_poptions, '\(.*\)', '\1', ' ')|" $out
    sed -i -e "s|\(^.*lib_libs =.*\$\)|\1 [strings] $regex.merge($lib_libs, '\(.*\)', '\1', ' ')|" $out
  }}

  # disable so that it doesn't try to run testscript + testscript{pure2} as a test
  testscript{$n}: test = false
}

# cxx.poptions =+ "-I$out_root" "-I$src_root"

# Note also that this rule has no problem compiling multiple .thrift files
# into the same gen-cpp/ subdirectory provided they don't clobber each other's
# generated files.
#
# [rule_name=cpp2_to_cpp1] cpp2_cxx{~'/(.+)/'}: cpp2{~'/\1/'} $cppfront
# {{
#    o = $directory($>[0])             # Target output directory.
#    s = $path($<[0])                  # Source file in.
#    so = $o/$name($s).cpp                  # Source file out.
#    d = $o/$name($<[0]).d             # Dep file (target list).

#    cppfront_options = -pure -output $so $s

#    dyndep_options = --target-what 'generated cpp2 -> cpp1'
#    dyndep_options += --target-extension-type h=hxx
#    dyndep_options += --target-extension-type cpp=cxx

#    depdb dyndep --dyn-target $dyndep_options --format lines --file $d -- \
#      $cppfront $cppfront_options                && \
#      find $o -type f -name "*.h"    >$d         && \
#      find $o -type f -name "*.cpp"  >>$d

#    diag cppfront $<
#    $cppfront $cppfront_options
# }}
