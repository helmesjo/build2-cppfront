libs =
import! [rule_hint=cxx.link] libs = libcpp2%lib{cpp2}
import cppfront = cppfront%exe{cppfront}

define [see_through] cpp2_cxx: group
define cpp2: file
cpp2{*}: extension = cpp2

define hpp2: file
hpp2{*}: extension = h2

define cpp2_out: file
cpp2_out{*}: extension = cpp

define cppfront_stdout: file
cppfront_stdout{*.cpp2}: extension = output

./: libue{cpp2-meta}: $libs

for t: regression-tests/cpp2{pure2-*}
{
  n = $name($t)

  ./: alias{$n}: $t testscript{$n} $cppfront
  {
    cpp2_in = $t
  }

  testscript{$n}: testscript{pure2} libue{cpp2-meta}
  {{
    in = $path($<[0])
    out = $path($>)
    lib_poptions = $cxx.lib_poptions(libue{cpp2-meta}, obje)
    lib_libs = $cxx.lib_libs(libue{cpp2-meta}, obje)
    depdb hash $lib_poptions
    depdb hash $lib_libs

    diag update ($<[0]) ($>)
    cp --no-cleanup $in $out
    sed -i -e "s|\(^.*lib_poptions =\)|\1 [strings] $regex.merge($lib_poptions, '\(.*\)', '\1', ' ')|" $out
    sed -i -e "s|\(^.*lib_libs =\)|\1 [strings] $regex.merge($lib_libs, '\(.*\)', '\1', ' ')|" $out

    # all generated files must have an up-to-date modification time.
    touch --after $in $out
    for i: $integer_sequence(1, $size($>))
      touch --after $in $path($>[$i])
    end
  }}

  # disable so that it doesn't try to run testscript + testscript{pure2} as a test.
  testscript{$n}: test = false
}

# see upstream/**/build-cppfront.yaml or run-tests.sh.
if ($cxx.target.system == 'win32-msvc')
{
  cxx.coptions += -nologo -EHsc
}
